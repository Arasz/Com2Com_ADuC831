C51 COMPILER V9.54   MAIN                                                                  10/27/2015 06:26:51 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: F:\Apps\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "ADuC831.h"
   2          #include "ADuC831_STD.h"
   3          #include "ADuC831_UART.h"
   4          #include "DAC.h"
   5            
   6          #define SLAVE_ID 0x0C
   7          #define BROADCAST_ID 0x3F
   8          #define PORT P2
   9          
  10          
  11          
  12          uchar READ_READY = 0; ///< Flaga gotowosci do odczytu
  13          uchar MESSAGE_IN_BUFFER;
  14          
  15          uchar txBuffer[BUFFER_SIZE];
  16          uchar rxBuffer[BUFFER_SIZE];
  17          
  18          uchar flush = 0;
  19          
  20          void UART_Init()
  21          {
  22   1        rxBuffer[0] = 1;
  23   1        txBuffer[0] = 0;
  24   1        
  25   1        SET_UART_MODE(UART_8BIT_VAR_BAUD);
  26   1        REN = SET_BIT; // Uruchom odbieranie danych
  27   1        EA = INTERRUPT_ENABLE;  // Zgoda globalna na przerwanie
  28   1        ES = INTERRUPT_ENABLE; // Zgoda na przerwanie od portu szeregowego
  29   1        // Generowanie BAUDRATE - TIM3
  30   1        TIM3_BAUD_ENABLE;
  31   1        SET_REQUIRED_BAUD;
  32   1      }
  33          
  34          // Struct definition //
  35          
  36          typedef struct ProtocolFrames
  37          {
  38            uchar SlaveId;
  39            uchar DataLength;
  40            char Command[2];
  41            uchar Data[10];
  42            
  43          } ProtocolFrame;
  44          
  45          const char constProtocolFrameLength = 4;
  46          
  47          // Enum definition // 
  48          enum Command
  49          {
  50            SA = 733,
  51            SD = 763,
  52            AS = 895,
  53            ID = 753,
  54          };
  55          
C51 COMPILER V9.54   MAIN                                                                  10/27/2015 06:26:51 PAGE 2   

  56          int CalculateEnumValue(char* cmd)
  57          {
  58   1        return (int)cmd[0]+10*cmd[1];
  59   1      }
  60          //--**--//
  61          
  62          void UART_Interrupt_Handler(void) interrupt 4
  63          {
  64   1        int ProtocolFrameLength = constProtocolFrameLength;
  65   1        
  66   1        if(RI == SET_FLAG)
  67   1        {
  68   2          if(MESSAGE_IN_BUFFER)
  69   2          {
  70   3            if(rxBuffer[0]< BUFFER_SIZE) // Sprawdz czy jest miejsce w buforze
  71   3            {
  72   4              rxBuffer[rxBuffer[0]] = SBUF; // Przypisz odebrany bajt do wolnego bajtu w buforze
  73   4              
  74   4              if(rxBuffer[0]>=2&&ProtocolFrameLength<=4) // Odczytano ilosc danych 
  75   4                ProtocolFrameLength+=rxBuffer[2];
  76   4              
  77   4              rxBuffer[0]++;
  78   4            }
  79   3            if(rxBuffer[0]> ProtocolFrameLength)
  80   3            {
  81   4              READ_READY = SET_FLAG; // Dane gotowe do odczytu
  82   4              MESSAGE_IN_BUFFER = CLEAR_FLAG;
  83   4            }
  84   3          }
  85   2          else 
  86   2          {
  87   3              if(SBUF==SLAVE_ID||SBUF==BROADCAST_ID)
  88   3              {
  89   4                      MESSAGE_IN_BUFFER = SET_FLAG;
  90   4                      rxBuffer[rxBuffer[0]] = SBUF; // Przypisz odebrany bajt do wolnego bajtu w buforze
  91   4                      rxBuffer[0]++; // Zwieksz licznik buffora
  92   4              } 
  93   3              else
  94   3              {
  95   4                rxBuffer[0] = 1;
  96   4              }
  97   3            
  98   3          }
  99   2          RI = CLEAR_FLAG; // Wyczysc flage przerwania
 100   2        }
 101   1        if(TI == SET_FLAG)
 102   1        {
 103   2          if(txBuffer[0]>1)
 104   2          {
 105   3            SBUF = txBuffer[txBuffer[0]--];
 106   3            TI = CLEAR_FLAG;
 107   3          }
 108   2          else
 109   2          {
 110   3            TI = CLEAR_FLAG;
 111   3          }
 112   2        }
 113   1      }
 114          
 115          
 116          
 117          uchar SLAVE_ReceiveData(ProtocolFrame *frame)
C51 COMPILER V9.54   MAIN                                                                  10/27/2015 06:26:51 PAGE 3   

 118          {
 119   1        int i;
 120   1        int index = 1;
 121   1        uchar flag = CLEAR_FLAG;
 122   1        
 123   1        if(rxBuffer[index]==frame->SlaveId||rxBuffer[index]==BROADCAST_ID)
 124   1        {
 125   2          index++;
 126   2          // Read data length
 127   2          frame->DataLength = rxBuffer[index++];
 128   2          // Read command
 129   2          for(i = 0; i<2; i++, index++)
 130   2          {
 131   3            frame->Command[i]= rxBuffer[index];
 132   3          }
 133   2          // Read data
 134   2          for(i = 0;i<frame->DataLength;i++,index++)
 135   2          {
 136   3            frame->Data[i] = rxBuffer[index];
 137   3          }
 138   2          flag = SET_FLAG;
 139   2        }
 140   1        rxBuffer[0] = 1; // Reset licznika
 141   1        READ_READY = CLEAR_FLAG;
 142   1        return flag;
 143   1      }
 144          
 145          void SLAVE_SendData(ProtocolFrame *frame)
 146          {
 147   1        int i;
 148   1        int index = 5+frame->DataLength;
 149   1        txBuffer[0] = index-1;
 150   1        
 151   1        txBuffer[index--] = frame->SlaveId; 
 152   1        txBuffer[index--] = frame->DataLength;
 153   1        // Write command
 154   1        for(i = 0; i<2; i++, index--)
 155   1        {
 156   2            txBuffer[index] = frame->Command[i];
 157   2        }
 158   1        // Read data
 159   1        for(i = 0; i<frame->DataLength; i++, index--)
 160   1        {
 161   2            txBuffer[index] = frame->Data[i];
 162   2        }
 163   1        SBUF = txBuffer[txBuffer[0]+1];
 164   1      }
 165          
 166          void ReadDigitalIo(ProtocolFrame *frame)
 167          {
 168   1        if(frame->DataLength <=2)
 169   1        {
 170   2          frame->Data[0] = 0x0;
 171   2          frame->Data[1] = 0x0;
 172   2          
 173   2          frame->Data[0] = PORT&0xFF;
 174   2        }
 175   1        else
 176   1        {
 177   2          frame->Data[2] = 0x0;
 178   2          frame->Data[3] = 0x0;
 179   2          
C51 COMPILER V9.54   MAIN                                                                  10/27/2015 06:26:51 PAGE 4   

 180   2          frame->Data[2] = PORT&0xFF;
 181   2        }
 182   1      }
 183          
 184          void WriteDigitalIo(ProtocolFrame *frame)
 185          {
 186   1        if(frame->DataLength <=2)
 187   1        {
 188   2          PORT = frame->Data[0];
 189   2        }
 190   1        else
 191   1        {
 192   2          PORT = frame->Data[2];
 193   2        }
 194   1      }
 195          
 196          void WriteAnalogIo(ProtocolFrame *frame)
 197          {
 198   1        int value = frame->Data[0];
 199   1        DAC_SetVoltage(DAC0, (value/63.0)*5);
 200   1      }
 201          
 202          void ReadAnalogIo(ProtocolFrame *frame)
 203          {
 204   1        int value;
 205   1        value = DAC0L; // First 8 bits
 206   1        value = (value&0x00FF)|(DAC0H<<8);
 207   1        value = (int)(((1.0*value)/MAX_REG_VAL)*63);
 208   1        frame->Data[0] = value&0xFF;
 209   1        frame->Data[1] = (value>>8)&0xFF;
 210   1      }
 211          
 212          
 213          
 214          void main(void)
 215          {
 216   1        uchar READY_TO_WORK = 0;
 217   1        
 218   1        ProtocolFrame inputFrame;
 219   1        
 220   1        PORT = 0x00; //wyjscia
 221   1        UART_Init();
 222   1        DAC_Init(DAC0);
 223   1      
 224   1        // Change id before start
 225   1        inputFrame.SlaveId = SLAVE_ID;
 226   1        
 227   1        while(1)
 228   1        {
 229   2          if(READ_READY)
 230   2          {
 231   3            EA = INTERRUPT_DISABLE;
 232   3            READY_TO_WORK = SLAVE_ReceiveData(&inputFrame);
 233   3          }
 234   2          if(READY_TO_WORK)
 235   2          {
 236   3            READY_TO_WORK  = 0;
 237   3            switch(CalculateEnumValue(inputFrame.Command))
 238   3            {
 239   4              case SA:
 240   4                WriteAnalogIo(&inputFrame);
 241   4                ReadAnalogIo(&inputFrame);
C51 COMPILER V9.54   MAIN                                                                  10/27/2015 06:26:51 PAGE 5   

 242   4                SLAVE_SendData(&inputFrame);
 243   4                break;
 244   4              case SD:
 245   4                WriteDigitalIo(&inputFrame);
 246   4                ReadDigitalIo(&inputFrame);
 247   4                SLAVE_SendData(&inputFrame);
 248   4                break;
 249   4              case AS:
 250   4                WriteAnalogIo(&inputFrame);
 251   4                ReadAnalogIo(&inputFrame);
 252   4                WriteDigitalIo(&inputFrame);
 253   4                ReadDigitalIo(&inputFrame);
 254   4                SLAVE_SendData(&inputFrame);
 255   4                break;
 256   4              case ID:
 257   4                inputFrame.DataLength = 4;
 258   4                inputFrame.SlaveId = SLAVE_ID;
 259   4                ReadAnalogIo(&inputFrame);
 260   4                ReadDigitalIo(&inputFrame);
 261   4                SLAVE_SendData(&inputFrame);
 262   4                break;
 263   4            }
 264   3          }
 265   2          if(EA == 0)
 266   2            EA = INTERRUPT_ENABLE;
 267   2        }
 268   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    926    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32      29
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
